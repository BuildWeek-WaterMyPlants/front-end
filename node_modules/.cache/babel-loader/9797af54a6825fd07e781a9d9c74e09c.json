{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\31614\\\\desktop\\\\lambda\\\\front-end\\\\src\\\\components\\\\SignUp.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport * as yup from 'yup';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nexport default function Signup() {\n  const [values, setValues] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [errors, setErrors] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const formSchema = yup.object().shape({\n    username: yup.string().required(2, \"Username is a required field.\"),\n    password: yup.string().required(\"Must include password.\")\n  });\n  const [buttonDisabled, setButtonDisabled] = useState(true);\n  useEffect(() => {\n    formSchema.isValid(values).then(valid => {\n      setButtonDisabled(!valid);\n    });\n  }, [values]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(\"Submitting \", values); // setValues({\n    //     username: \"\",\n    //     password: \"\",\n    // }); \n  }; // const inputChange = e => {\n  //     e.persist();\n  //     const newFormData = {\n  //       ...values,\n  //       [e.target.username]: 'test'\n  //         // e.target.type === \"checkbox\" ? e.target.checked : e.target.value\n  //     };\n  //     validateChange(e);\n  //     setValues(newFormData);\n  //   };\n\n\n  const validateChange = e => {\n    // Reach will allow us to \"reach\" into the schema and test only one part.\n    yup.reach(formSchema, e.target.username).validate(e.target.value).then(valid => {\n      setErrors({ ...errors,\n        [e.target.username]: \"\"\n      });\n    }).catch(err => {\n      setErrors({ ...errors,\n        [e.target.username]: err.errors[0]\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"Enter your Username\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"username\",\n    placeholder: \"username\",\n    values: values.username // onChange={inputChange}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"Enter a password\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    values: values.password // onChange={inputChange}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, \"Sign Up\"));\n}","map":{"version":3,"sources":["C:/Users/31614/desktop/lambda/front-end/src/components/SignUp.js"],"names":["React","useState","useEffect","axios","yup","styled","useHistory","Signup","values","setValues","username","password","errors","setErrors","formSchema","object","shape","string","required","buttonDisabled","setButtonDisabled","isValid","then","valid","handleSubmit","e","preventDefault","console","log","validateChange","reach","target","validate","value","catch","err"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport * as yup from 'yup';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function Signup() {\n    const [values, setValues] = useState({\n        username: \"\",\n        password: \"\",\n    });\n\n    const [errors, setErrors] = useState({\n        username: \"\",\n        password: \"\",\n    })\n\n\n    const formSchema = yup.object().shape({\n        username: yup\n        .string()\n        .required(2, \"Username is a required field.\"), \n        password: yup\n          .string()\n          .required(\"Must include password.\"),\n      });\n\n      const [buttonDisabled, setButtonDisabled] = useState(true);\n\n      useEffect(() => {\n        formSchema.isValid(values).then(valid => {\n          setButtonDisabled(!valid);\n        });\n      }, [values]);\n\n\nconst handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"Submitting \", values);\n        // setValues({\n        //     username: \"\",\n        //     password: \"\",\n        // }); \n    };\n\n    // const inputChange = e => {\n    //     e.persist();\n    //     const newFormData = {\n    //       ...values,\n    //       [e.target.username]: 'test'\n    //         // e.target.type === \"checkbox\" ? e.target.checked : e.target.value\n    //     };\n    \n    //     validateChange(e);\n    //     setValues(newFormData);\n    //   };\n\n      const validateChange = e => {\n        // Reach will allow us to \"reach\" into the schema and test only one part.\n        yup\n          .reach(formSchema, e.target.username)\n          .validate(e.target.value)\n          .then(valid => {\n            setErrors({\n              ...errors,\n              [e.target.username]: \"\"\n            });\n          })\n          .catch(err => {\n            setErrors({\n              ...errors,\n              [e.target.username]: err.errors[0]\n            });\n          });\n      };\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <label htmlFor=\"username\">Enter your Username\n                    <input \n                    type='text'\n                    name='username'\n                    placeholder='username'\n                    values={values.username}\n                    // onChange={inputChange}\n                    />\n                </label>\n            </div>\n            <div>\n                <label htmlFor=\"password\">Enter a password\n                    <input \n                    type='password'\n                    name='password'\n                    placeholder='Password'\n                    values={values.password}\n                    // onChange={inputChange}\n\n                    />\n                </label>\n            </div>\n            <button type='submit'>Sign Up</button>\n        </form>\n    )\n}"]},"metadata":{},"sourceType":"module"}